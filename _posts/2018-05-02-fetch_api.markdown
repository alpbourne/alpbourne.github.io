---
layout: post
title:      " Fetch API"
date:       2018-05-02 14:55:37 +0000
permalink:  fetch_api
---


Fetch API requests are the modern way to make asynchronous network requests. An asynchronous network request does not block users from using the browser until an operation completes, whereas synchronous network requests  block the user until the operation completes. 

![](http://i.imgur.com/wBaDT29.png)

Fetch takes in one argument, which is the path it needs to take to get to the resource you want to retrieve. In line 1 above, you can see that the argument getting passed in is to retrieve a specific item. The return value of fetch is a promise.  "A promise object is an object that represents some value that will be available later"(1).  So far we are making a fetch request to our resource path and now we want to wait for our promise to resolve before moving onto the next action. So how do we do that? 

We do that with the then() function of the promise. The then() function will recieve the response object of the promise. The response object "contains all the information about the request and the response of the network request" (2). If you look at line 2 above you will see the first then() function. That specific then() function receives and returns the response object of the promise and allows the response body to be available through the json() method attatched. You can also use a text() method if that is more fitting.

After the then() function on line 2 fires, then line 3's will fire. Line 3's then() function now has access to the response body because line 2's then() function handled the response object of the promise. In this example we are console.logging the response body labled as "item." After line 3 runs, we should see a couple of things inside our console. First you will see the promise with a promiseStatus of resolved. Then you will see the response body which contains the information we requested through the Fetch API request.  The last thing you will see is a statement saying that the fetch has finished loading, along with the request type and path. 

As you can see we need 2 then() functions after a Fetch API request. The first one handles the response object of the promise and makes the information in the response available. The second one says what to do with the response information. 

If you would like to read more about Fetch API requests, I recommend taking a look at the resources below.




(1)https://github.com/learn-co-students/redux-thunk-readme-v-000
(2)https://flaviocopes.com/fetch-api/
(3)https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
